package org.seasar.aptina.beans.example;

/**
 * 
 * @author koichik
 */
@javax.annotation.Generated({"Aptina Beans", "DEV"})
@org.seasar.aptina.beans.JavaBean
public class BoundBean extends org.seasar.aptina.beans.example.BoundBeanState {

    java.beans.PropertyChangeSupport propertyChangeSupport =
        new java.beans.PropertyChangeSupport(this);

    public  BoundBean() {
        super();
    }

    /**
     * {@link java.beans.PropertyChangeListener} をリスナーリストに追加します。
     * 
     * @param listener 追加する {@link java.beans.PropertyChangeListener}
     */
    public void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * 特定のプロパティーの {@link java.beans.PropertyChangeListener} をリスナーリストに追加します。
     * 
     * @param propertyName 待機しているプロパティーの名前
     * @param listener 追加する {@link java.beans.PropertyChangeListener}
     */
    public void addPropertyChangeListener(String propertyName, java.beans.PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(propertyName, listener);
    }

    /**
     * {@link java.beans.PropertyChangeListener} をリスナーリストから削除します。
     * 
     * @param listener 削除する {@link java.beans.PropertyChangeListener}
     */
    public void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }

    /**
     * 特定のプロパティーの {@link java.beans.PropertyChangeListener} をリスナーリストから削除します。
     * 
     * @param propertyName 待機していたプロパティーの名前
     * @param listener 削除する {@link java.beans.PropertyChangeListener}
     */
    public void removePropertyChangeListener(String propertyName, java.beans.PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(propertyName, listener);
    }

    /**
     * {@literal aaa} を返します。
     * 
     * @return {@literal aaa}
     */
    public java.lang.String getAaa() {
        return aaa;
    }

    /**
     * {@literal bbb} を返します。
     * 
     * @return {@literal bbb}
     */
    public java.lang.String getBbb() {
        return bbb;
    }

    /**
     * {@literal bbb} を設定します。
     * 
     * @param bbb {@literal bbb}
     */
    public void setBbb(java.lang.String bbb) {
        java.lang.String oldBbb = this.bbb;
        this.bbb = bbb;
        propertyChangeSupport.firePropertyChange("bbb", oldBbb, bbb);
    }

    /**
     * {@literal bbb} の {@link java.beans.PropertyChangeListener} をリスナーリストに追加します。
     * 
     * @param listener 追加する {@link java.beans.PropertyChangeListener}
     */
    public void addBbbChangeListener(java.beans.PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener("bbb", listener);
    }

    /**
     * {@literal bbb} の {@link java.beans.PropertyChangeListener} をリスナーリストから削除します。
     * 
     * @param listener 削除する {@link java.beans.PropertyChangeListener}
     */
    public void removeBbbChangeListener(java.beans.PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener("bbb", listener);
    }

    /**
     * {@literal ccc} を返します。
     * 
     * @return {@literal ccc}
     */
    public java.lang.String[] getCcc() {
        return ccc;
    }

    /**
     * {@literal ccc} の {@literal n} 番目の要素を返します。
     * 
     * @param n 返される要素のインデックス
     * @return {@literal n} 番目の {@literal ccc}
     * @throws ArrayIndexOutOfBoundsException インデックスが配列のサイズを超えていた場合
     */
    public java.lang.String getCcc(int n) throws ArrayIndexOutOfBoundsException {
        return ccc[n];
    }

    /**
     * {@literal ccc} を設定します。
     * 
     * @param ccc {@literal ccc}
     */
    public void setCcc(java.lang.String[] ccc) {
        java.lang.String[] oldCcc = this.ccc;
        this.ccc = ccc;
        propertyChangeSupport.firePropertyChange("ccc", oldCcc, ccc);
    }

    /**
     * {@literal ccc} の {@literal n} 番目の要素を設定します。
     * 
     * @param n 設定される要素のインデックス
     * @param ccc {@literal ccc}
     * @throws ArrayIndexOutOfBoundsException インデックスが配列のサイズを超えていた場合
     */
    public void setCcc(int n, java.lang.String ccc) throws ArrayIndexOutOfBoundsException {
        java.lang.String oldCcc = this.ccc[n];
        this.ccc[n] = ccc;
        propertyChangeSupport.fireIndexedPropertyChange("ccc", n, oldCcc, ccc);
    }

    /**
     * {@literal ccc} の {@link java.beans.PropertyChangeListener} をリスナーリストに追加します。
     * 
     * @param listener 追加する {@link java.beans.PropertyChangeListener}
     */
    public void addCccChangeListener(java.beans.PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener("ccc", listener);
    }

    /**
     * {@literal ccc} の {@link java.beans.PropertyChangeListener} をリスナーリストから削除します。
     * 
     * @param listener 削除する {@link java.beans.PropertyChangeListener}
     */
    public void removeCccChangeListener(java.beans.PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener("ccc", listener);
    }

}
